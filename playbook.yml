---

- name: Run the nusenu.relayor role and include custom vars
  remote_user: root
  gather_facts: yes
  hosts: '{{ target }}'
  vars_files:
    - vars/main.yml
  vars:
    bridge_fingerprints:
      - 255EE68D31F265C768A43907EB00449D674F0FD2
      - 1A48C9E54CE95D9A123D46C6356DEAD8E5F61037
  roles:
    #- nusenu.relayor
    - ~/Documents/ansible/ansible-relayor

  pre_tasks:
  
 # - set_fact:
 #     ansible_python_interpreter: "/usr/bin/python3"

  # - name: Fetch Tor GPG key
  #   ansible.builtin.shell: wget -qO- https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import
  #   args:
  #     executable: /bin/bash

  # - name: Import Tor GPG key
  #   ansible.builtin.shell: gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -
  #   args:
  #     executable: /bin/bash

  # - name: Ensure unbound is installed
  #   apt:
  #     name: unbound
  #     state: present

  # - name: Copy resolv.conf
  #   copy:
  #     src: files/resolv.conf
  #     dest: /etc/resolv.conf
  #     owner: root
  #     group: root
  #     mode: '0644'
  #     backup: yes

  # - name: Set net.ipv4.tcp_fin_timeout to defined value
  #   sysctl:
  #     name: net.ipv4.tcp_fin_timeout
  #     value: 20
  #     sysctl_set: yes
  #     state: present
  #     reload: yes
  #   when: ansible_virtualization_type != 'lxc'

  # - name: Set net.ipv4.tcp_keepalive_time to defined value
  #   sysctl:
  #     name: net.ipv4.tcp_keepalive_time
  #     value: 1200
  #     sysctl_set: yes
  #     state: present
  #     reload: yes
  #   when: ansible_virtualization_type != 'lxc'

  # - name: Set net.ipv4.tcp_syncookies to defined value
  #   sysctl:
  #     name: net.ipv4.tcp_syncookies
  #     value: 1
  #     sysctl_set: yes
  #     state: present
  #     reload: yes
  #   when: ansible_virtualization_type != 'lxc'

  # - name: Set net.ipv4.tcp_tw_reuse to defined value
  #   sysctl:
  #     name: net.ipv4.tcp_tw_reuse
  #     value: 1
  #     sysctl_set: yes
  #     state: present
  #     reload: yes
  #   when: ansible_virtualization_type != 'lxc'

  # - name: Set net.ipv4.tcp_max_syn_backlog to defined value
  #   sysctl:
  #     name: net.ipv4.tcp_max_syn_backlog
  #     value: 8192
  #     sysctl_set: yes
  #     state: present
  #     reload: yes
  #   when: ansible_virtualization_type != 'lxc'

  # - name: Set net.ipv4.tcp_max_tw_buckets to defined value
  #   sysctl:
  #     name: net.ipv4.tcp_max_tw_buckets
  #     value: 5000
  #     sysctl_set: yes
  #     state: present
  #     reload: yes
  #   when: ansible_virtualization_type != 'lxc'

  post_tasks:

  #- debug: 
  #  var: ansible_tailscale0.ipv4.address

  # - name: Enable MetricsPort in torrc
  #   lineinfile:
  #     dest: "{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/torrc"
  #     regexp: "{{ item.regexp }}"
  #     line: "{{ item.line }}"
  #     insertafter: EOF
  #     state: present
  #   with_items: "MetricsPort {{ raspi_boot_config_options }}:9035"

  - name: Find Tor service files
    shell: find /etc/systemd/system/multi-user.target.wants/ -name "tor@*.service"
    register: tor_service_files

  - name: Extract Tor service names
    set_fact:
      tor_services: "{{ tor_service_files.stdout_lines | map('basename') | list }}"

  - name: Find torrc files
    find:
      paths: /etc/tor/instances/
      patterns: 'torrc'
      recurse: true
    register: torrc_files

  - name: Add fingerprints to MyFamily line if not already present
    shell: |
      for fingerprint in {{ bridge_fingerprints | join(' ') }}; do
        if ! grep -qP "MyFamily\\s+.*\\b$fingerprint\\b" "{{ item.path }}"; then
          if grep -qP "^MyFamily" "{{ item.path }}"; then
            sed -i -E "s/(MyFamily\\s+.*)/\\1,$fingerprint/" "{{ item.path }}"
          else
            echo "MyFamily $fingerprint" >> "{{ item.path }}"
          fi
        fi
      done
    loop: "{{ torrc_files.files }}"

  - name: Print Tor service names
    debug:
      var: tor_services

  - name: Reload Tor after inserting meek bridge fingerprint
    systemd:
      name: "{{ item }}"
      state: reloaded
      daemon_reload: yes
    loop: "{{ tor_services }}"